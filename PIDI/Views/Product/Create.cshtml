@model PIDI.Models.ProductModel
@using PIDI.Controllers.Admin;

@{
    ViewBag.Title = "Create";
}
<style>
    @ViewData.
.uploadPreview{
    display: flex;
}
.fixed{
    width: 200px;
}
.flex-item{
    flex-grow: 50;
    max-height : 150px;
    max-width : 150px;
}
</style>

<div class="container">

    <h2>Incluir produto</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">

            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group text-monospace h4 font-weight-bold">
                @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control form-control-lg" } })
                    @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group text-monospace h4 font-weight-bold">
                @Html.LabelFor(model => model.ProductDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ProductDescription, new { htmlAttributes = new { @class = "form-control form-control-lg" } })
                    @Html.ValidationMessageFor(model => model.ProductDescription, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group text-monospace h4 font-weight-bold">
                @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label col-md-2" })
                @{
                    var categories = CategoryController.Instance.GetCategories(100);
                    List<SelectListItem> listItems = new List<SelectListItem>();
                    int i = 0;
                    foreach (var item in categories)
                    {
                        if (i == 0)
                        {
                            listItems.Add(new SelectListItem
                            {
                                Text = item.CategoryName,
                                Value = item.CategoryName,
                                Selected = true
                            });
                        }
                        else
                        {
                            listItems.Add(new SelectListItem
                            {
                                Text = item.CategoryName,
                                Value = item.CategoryName,
                            });
                        }
                        ++i;
                    }
                }
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Category, listItems, new { htmlAttributes = new { @class = "form-control form-control-lg", @required = "required" } })
                    @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group text-monospace h4 font-weight-bold">
                @Html.LabelFor(model => model.Preco, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Preco, new { htmlAttributes = new { @class = "form-control form-control-lg" } })
                    @Html.ValidationMessageFor(model => model.Preco, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group text-monospace h4 font-weight-bold">
                @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control form-control-lg" } })
                    @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                </div>
            </div>

           <input type="file" id="uploadImage" name="termek_file" class="file_input" multiple/>

             @*@Html.TextBoxFor(m => m.productImages, new { @type = "file", @id="uploadImage", @class="file_input" })
             @Html.ValidationMessageFor(m => m.productImages)*@
           <div id="result" class="uploadPreview"></div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    @Html.ActionLink("Retornar", "Index", null, new { @class = "btn btn-info btn-lg" })&nbsp &nbsp
                    <input type="submit" onclick ="validate()"value="Incluir" class="btn btn-info btn-lg" />
                </div>
            </div>
        </div>
    }

</div>


<script src="http://code.jquery.com/jquery-1.9.1.js"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
<script type="text/javascript">
      
   window.onload = function() {
  if (window.File && window.FileList && window.FileReader) {
    var filesInput = document.getElementById("uploadImage");
    filesInput.addEventListener("change", function(event) {
      var files = event.target.files;
        var output = document.getElementById("result");

        //$.ajax({
        //    url: "/Gallery/",
        //    data: {
        //        txtsearch: files
        //    },
        //    type: "POST",
        //     dataType : "json",
        //      success : function(data){
        //         for($i=0; $i < data.length; $i++)
        //           console.log(data[$i])
        //      },
        //    error: function (xhr, status) {
        //        alert("Sorry, there was a problem!");
        //    },
        //    complete: function (xhr, status) {
        //        //$('#showresults').slideDown('slow')
        //    }
        //});

      for (var i = 0; i < files.length; i++) {
          var file = files[i];
        if (!file.type.match('image'))
          continue;
        var picReader = new FileReader();
        picReader.addEventListener("load", function(event) {
            var picFile = event.target;
            var div = document.createElement("div");
          div.innerHTML = "<img class='flex-item' src='" + picFile.result + "'" +
            "title='" + picFile.name + "'/>";
          output.insertBefore(div, null);
        });        
        picReader.readAsDataURL(file);
      }

    });
  }
    }

      
</script>

